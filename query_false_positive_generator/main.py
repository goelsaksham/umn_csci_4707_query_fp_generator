import Vars as vr
import HashGenerator as hg
import QueryProcesser as qp
import DocHashGenerator as dhg


# A list of dictionaries denoting a hashinng function
def generate_all_hash():
    return hg.construct(vr.BASIC_HASH_SET, vr.ELEM_LIST)


# A list if lists, such that inner lists contain numbers for the hashes generated by the docs
def generate_all_doc_hash():
    def doc_hash_generator_for_hash_dict_list(all_hashes):
        all_doc_hash = []
        for hash_dict in all_hashes:
            all_doc_hash.append(dhg.generate_all_doc_hash(vr.ALL_DOCS, hash_dict))
        return all_doc_hash
    return doc_hash_generator_for_hash_dict_list(generate_all_hash())



def all_query_fp_generator_for_all_hash():
    def helper(hash_list, doc_hash_list_list):
        ls = []
        for i in range(len(hash_list)):
            ls.append(qp.get_false_positives_for_all_queries(vr.ALL_QUERIES, hash_list[i], vr.ALL_DOCS, doc_hash_list_list[i]))
        return ls
    return helper(generate_all_hash(), generate_all_doc_hash())


def main():
    all_hash = generate_all_hash()
    all_query_fp = all_query_fp_generator_for_all_hash()
    min_value = min(all_query_fp)
    print(min_value)
    #index_of_min_val = all_query_fp.index(min_value)
    #print(index_of_min_val)
    ls = [all_hash[index_of_min_val] for index_of_min_val in range(len(all_hash)) if all_query_fp[index_of_min_val]
          == min_value]
    for di in ls:
        print(di)


if __name__ == '__main__':
    main()